generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String   @unique
  phoneNumber        String?  @unique
  occupation         String?
  country            String?
  socialMediaHandles String[]
  fullName           String?
  name               String
  password           String
  refreshToken       String?
  avatar             String?  @default("https://aui.atlassian.com/aui/9.3/docs/images/avatar-person.svg")
  isUserBan          Boolean  @default(false)
  isAdmin            Boolean  @default(false)
  isVendor           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  reviews        Review[]
  wishlistItems  WishlistItem[]
  vendorProducts Product[]      @relation("VendorProducts")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  salePrice   Float?
  images      String[]
  stock       Int      @default(0)
  sku         String?  @unique
  weight      Float?
  dimensions  String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isOnSale    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id])
  vendorId      String         @db.ObjectId
  vendor        User           @relation("VendorProducts", fields: [vendorId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float
  shippingFee Float       @default(0)
  taxAmount   Float       @default(0)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId            String      @db.ObjectId
  user              User        @relation(fields: [userId], references: [id])
  shippingAddress   Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?     @db.ObjectId
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String?     @db.ObjectId
  orderItems        OrderItem[]
  payment           Payment?
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         AddressType
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  userId         String  @db.ObjectId
  user           User    @relation(fields: [userId], references: [id])
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

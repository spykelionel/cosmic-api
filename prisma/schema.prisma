// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String   @unique
  password         String
  avatar           String?
  isAdmin          Boolean  @default(false)
  isVendor         Boolean  @default(false)
  isUserBan        Boolean  @default(false)
  stripeCustomerId String?  @unique
  refreshToken     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  reviews        Review[]
  wishlistItems  WishlistItem[]
  vendorProducts Product[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  salePrice     Float?
  images        String[]
  stock         Int      @default(0)
  sku           String   @unique
  weight        Float?
  dimensions    Json?
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  isOnSale      Boolean  @default(false)
  averageRating Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categoryId    String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id])
  vendorId      String         @db.ObjectId
  vendor        User           @relation(fields: [vendorId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float
  shippingFee Float       @default(0)
  taxAmount   Float       @default(0)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId            String      @db.ObjectId
  user              User        @relation(fields: [userId], references: [id])
  shippingAddressId String      @db.ObjectId
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String      @db.ObjectId
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  orderItems        OrderItem[]
  payment           Payment?
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         AddressType
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  userId        String  @db.ObjectId
  user          User    @relation(fields: [userId], references: [id])
  orders        Order[] @relation("ShippingAddress")
  billingOrders Order[] @relation("BillingAddress")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  transactionId String?       @unique
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  PROCESSING
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  WALLET
  CASH
}
